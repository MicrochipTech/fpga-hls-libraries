// ©2022 Microchip Technology Inc. and its subsidiaries
//
// Subject to your compliance with these terms, you may use this Microchip
// software and any derivatives exclusively with Microchip products. You are
// responsible for complying with third party license terms applicable to your
// use of third party software (including open source software) that may
// accompany this Microchip software. SOFTWARE IS “AS IS.” NO WARRANTIES,
// WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING
// ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR
// A PARTICULAR PURPOSE. IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY
// INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST
// OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED,
// EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE
// FORESEEABLE.  TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP’S TOTAL
// LIABILITY ON ALL CLAIMS LATED TO THE SOFTWARE WILL NOT EXCEED AMOUNT OF
// FEES, IF ANY, YOU PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE. MICROCHIP
// OFFERS NO SUPPORT FOR THE SOFTWARE. YOU MAY CONTACT MICROCHIP AT
// https://www.microchip.com/en-us/support-and-training/design-help/client-support-services
// TO INQUIRE ABOUT SUPPORT SERVICES AND APPLICABLE FEES, IF AVAILABLE.

#include <fstream>
#include <iostream>
#include <cmath>
using std::cout;
using std::endl;
using std::string;

// Change these parameters as needed:
//--\/--------------------------------\/--
#define CHANNEL_WIDTH 8
#define GAMMA 0.5
//--/\--------------------------------/\--

#define TABLE_SIZE (1 << CHANNEL_WIDTH)

int main(){
    const string filename = "generated_tables/gamma_correction_table.hpp";
    cout << "Generating table for:" << endl
        << "\tGAMMA         : " << GAMMA << endl
        << "\tCHANNEL_WIDTH : " << CHANNEL_WIDTH << endl
        << "\tfilename      : " << filename << endl;

    std::ofstream ofs(filename, std::ofstream::out);
    ofs << "// This file was autogenerated with the following parameters:" << endl
        << "// \tGAMMA         : " << GAMMA << endl
        << "// \tCHANNEL_WIDTH : " << CHANNEL_WIDTH << endl
        << endl;

    ofs << "#pragma once" << endl << endl;

    ofs << "namespace hls{\n"
        << "namespace vision{\n"
        << "#pragma HLS memory replicate_rom variable(GAMMA_CORRECTION_TABLE) max_replicas(0)\n"
        << "#pragma HLS memory impl variable(GAMMA_CORRECTION_TABLE) pack(abi) byte_enable(true)\n"
        << "static const hls::ap_uint<8> GAMMA_CORRECTION_TABLE[" << TABLE_SIZE << "] = {\n"
        << endl;

    for(int i=0; i < TABLE_SIZE; i++) {
        float fv = pow((float)i / (TABLE_SIZE-1), 1.0 / GAMMA) * (TABLE_SIZE-1);
        fv = (fv > TABLE_SIZE) ? TABLE_SIZE : fv;
        ofs << "\t" << (unsigned)fv << (i == TABLE_SIZE - 1 ? "\n};\n" : ",\n");
    }

    ofs << "}}" << endl;
    return 0;
}
